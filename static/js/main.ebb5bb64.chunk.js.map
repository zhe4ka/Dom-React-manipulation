{"version":3,"sources":["TableCell.js","TableRow.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","state","color","e","this","setState","onClick","changeColor","style","React","Component","TableRow","columns","i","push","Table","console","log","row","rows","column","App","numCol","numRow","target","value","class","addRow","addColumn","removeRow","removeColumn","onChange","addColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAwBeA,G,wDApBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,MAAM,EAAKF,MAAME,OAHP,E,wDAMLC,GACRC,KAAKC,SAAS,CAEXH,MAAME,KAAKJ,MAAME,U,+BAKhB,IAAD,OACR,OACI,oBAAKI,QAAS,SAACH,GAAD,OAAK,EAAKI,YAAYJ,IAAIK,MAAO,CAAC,mBAAmBJ,KAAKH,MAAMC,OAA9E,mB,GAjBgBO,IAAMC,YCafC,E,uKAVP,IADA,IAAIC,EAAQ,GACHC,EAAE,EAAGA,EAAET,KAAKJ,MAAMY,QAASC,IAChCD,EAAQE,KAAK,cAAC,EAAD,CAAWZ,MAAOE,KAAKJ,MAAME,SAElD,OAEQ,6BAAKU,Q,GAROH,IAAMC,WCmBfK,E,kDAlBX,WAAYf,GAAO,uCACVA,G,qDAILgB,QAAQC,IAAIb,KAAKJ,MAAMkB,KAEvB,IADA,IAAIC,EAAK,GACAN,EAAE,EAAGA,EAAET,KAAKJ,MAAMkB,IAAKL,IAC5BM,EAAKL,KAAK,cAAC,EAAD,CAAWF,QAASR,KAAKJ,MAAMoB,OAAQlB,MAAOE,KAAKJ,MAAME,SAE3E,OACI,gCACGiB,Q,GAbUV,IAAMC,WC6DZW,E,kDA1Db,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTqB,OAAO,EACPC,OAAO,EACPrB,MAAO,SALO,E,qDAShBE,KAAKC,SAAS,CACZkB,OAAQnB,KAAKH,MAAMsB,OAAO,M,kCAK5BnB,KAAKC,SAAS,CACZiB,OAAQlB,KAAKH,MAAMqB,OAAO,M,qCAK5BlB,KAAKC,SAAS,CACZiB,OAAQlB,KAAKH,MAAMqB,OAAO,M,kCAI5BlB,KAAKC,SAAS,CACZkB,OAAQnB,KAAKH,MAAMsB,OAAO,M,+BAIrBpB,GACPC,KAAKC,SAAS,CACZH,MAAMC,EAAEqB,OAAOC,U,+BAGZ,IAAD,OACN,OACF,gCACM,cAAC,EAAD,CAAOP,IAAKd,KAAKH,MAAMsB,OAASH,OAAQhB,KAAKH,MAAMqB,OAAQpB,MAAOE,KAAKH,MAAMC,QAC7E,uBACF,sBAAKwB,MAAM,UAAX,UACA,wBAAQpB,QAAS,SAACH,GAAD,OAAK,EAAKwB,OAAOxB,IAAlC,sBACA,wBAAQG,QAAS,SAACH,GAAD,OAAK,EAAKyB,UAAUzB,IAArC,2BACA,wBAAQG,QAAS,SAACH,GAAD,OAAK,EAAK0B,UAAU1B,IAArC,yBACA,wBAAQG,QAAS,SAACH,GAAD,OAAK,EAAK2B,aAAa3B,IAAxC,8BACC,4DACD,yBAAQ4B,SAAU,SAAC5B,GAAD,OAAK,EAAK6B,SAAS7B,IAArC,UACE,wBAAQsB,MAAM,QAAd,mBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,+B,GAnDYf,aCOHuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ebb5bb64.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass TableCell extends React.Component {\r\n    constructor(props){\r\n        super(props) \r\n        this.state={\r\n            color:this.props.color\r\n        }\r\n     }\r\n     changeColor(e){\r\n         this.setState({\r\n\r\n            color:this.props.color\r\n         })\r\n\r\n         \r\n     }\r\n    render(){\r\n    return (\r\n        <td  onClick={(e)=>this.changeColor(e)} style={{\"background-color\":this.state.color}}> </td>\r\n    )\r\n}\r\n}\r\nexport default TableCell","import React from 'react'\r\nimport TableCell from './TableCell'\r\n\r\nclass  TableRow extends React.Component {\r\n    render(){\r\n        let columns=[]\r\n        for( let i=0; i<this.props.columns; i++){\r\n            columns.push(<TableCell color={this.props.color}/>)\r\n        }\r\n    return (\r\n\r\n            <tr>{columns }</tr>\r\n       \r\n    )\r\n}\r\n}\r\nexport default TableRow","import React from 'react'\r\nimport TableRow from './TableRow'\r\n\r\nclass  Table extends React.Component {\r\n    constructor(props){\r\n       super(props)\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props.row)\r\n        let rows=[]\r\n        for( let i=0; i<this.props.row; i++){\r\n            rows.push(<TableRow  columns={this.props.column} color={this.props.color} />)\r\n        }\r\n    return (\r\n        <table>       \r\n          {rows}\r\n        </table>\r\n        \r\n    )\r\n}\r\n}\r\nexport default Table\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './Table'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      numCol:1,\n      numRow:1,\n      color: 'green',\n    }\n  }\n  addRow(){\n    this.setState({\n      numRow: this.state.numRow+1\n    })\n  }\n\n  addColumn(){\n    this.setState({\n      numCol: this.state.numCol+1\n  })\n}\n  \n  removeColumn(){\n    this.setState({\n      numCol: this.state.numCol-1\n    })\n  }\n  removeRow(){\n    this.setState({\n      numRow: this.state.numRow-1\n    })\n  }\n\n  addColor(e){\n    this.setState({\n      color:e.target.value\n    })\n  }\nrender(){\n  return (\n<div >\n      <Table row={this.state.numRow } column={this.state.numCol} color={this.state.color}/>\n      <br></br>\n    <div class=\"buttons\">\n    <button onClick={(e)=>this.addRow(e)} >Add Row </button>\n    <button onClick={(e)=>this.addColumn(e)} > Add a Column</button>\n    <button onClick={(e)=>this.removeRow(e)} >Remove Row </button>\n    <button onClick={(e)=>this.removeColumn(e)}> Remove a Column</button>\n     <button>Change Color of a cell</button>\n    <select onChange={(e)=>this.addColor(e)} > \n      <option value=\"green\">Green</option>\n      <option value=\"bisque\">Bisque</option>\n      <option value=\"pink\">Pink</option>\n    </select>\n    {/* <button id=\"clear\">Clear </button>   */}\n </div>\n </div>\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}